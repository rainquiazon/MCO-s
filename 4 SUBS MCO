import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# -------------------- DATABASE --------------------
def init_db():
    conn = sqlite3.connect("recordmate.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            age INTEGER,
            birthday TEXT,
            course TEXT
        )
    """)
    conn.commit()
    conn.close()

def fetch_students():
    conn = sqlite3.connect("recordmate.db")
    c = conn.cursor()
    c.execute("SELECT * FROM students")
    data = c.fetchall()
    conn.close()
    return data

def add_student(name, age, birthday, course):
    conn = sqlite3.connect("recordmate.db")
    c = conn.cursor()
    c.execute("INSERT INTO students (name, age, birthday, course) VALUES (?, ?, ?, ?)",
              (name, age, birthday, course))
    conn.commit()
    conn.close()

def update_student(student_id, name, age, birthday, course):
    conn = sqlite3.connect("recordmate.db")
    c = conn.cursor()
    c.execute("UPDATE students SET name=?, age=?, birthday=?, course=? WHERE id=?",
              (name, age, birthday, course, student_id))
    conn.commit()
    conn.close()

def delete_student(student_id):
    conn = sqlite3.connect("recordmate.db")
    c = conn.cursor()
    c.execute("DELETE FROM students WHERE id=?", (student_id,))
    conn.commit()
    conn.close()

# -------------------- LOGIN --------------------
class LoginWindow:
    def __init__(self, master):
        self.master = master
        self.master.title("Login")
        self.master.geometry("400x300")

        font_big = ("Arial", 16)
        font_small = ("Arial", 14)

        tk.Label(self.master, text="Username", font=font_big).pack(pady=10)
        self.username_entry = tk.Entry(self.master, font=font_small)
        self.username_entry.pack(pady=5)

        tk.Label(self.master, text="Password", font=font_big).pack(pady=10)
        self.password_entry = tk.Entry(self.master, show="*", font=font_small)
        self.password_entry.pack(pady=5)

        ttk.Button(self.master, text="Login", command=self.login).pack(pady=20)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Hardcoded credentials
        if username == "admin" and password == "password":
            self.master.destroy()
            self.open_main_app()
        else:
            messagebox.showerror("Login Error", "Invalid username or password.")

    def open_main_app(self):
        root = tk.Tk()
        app = RecordMateApp(root)
        root.mainloop()

# -------------------- GUI --------------------
class RecordMateApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üóÉÔ∏è RecordMate - Secure Student Records")
        self.root.state("zoomed")  # Fullscreen (Windows only)
        self.selected_id = None

        self.setup_ui()
        self.refresh_tree()

    def setup_ui(self):
        font_title = ("Helvetica", 24, "bold")
        font_label = ("Arial", 16)
        font_entry = ("Arial", 16)

        tk.Label(self.root, text="RecordMate üìö", font=font_title).pack(pady=20)

        input_frame = tk.Frame(self.root)
        input_frame.pack(pady=10)

        labels = ["Name", "Age", "Birthday (YYYY-MM-DD)", "Course"]
        self.entries = []

        for i, label in enumerate(labels):
            tk.Label(input_frame, text=label, font=font_label).grid(row=i, column=0, sticky="e", padx=10, pady=5)
            entry = tk.Entry(input_frame, width=30, font=font_entry)
            entry.grid(row=i, column=1, padx=10, pady=5)
            self.entries.append(entry)

        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=20)

        style = ttk.Style()
        style.configure("TButton", font=("Arial", 14))

        ttk.Button(btn_frame, text="Add Student", command=self.add_student).grid(row=0, column=0, padx=10)
        ttk.Button(btn_frame, text="Update Selected", command=self.update_student).grid(row=0, column=1, padx=10)
        ttk.Button(btn_frame, text="Delete Selected", command=self.delete_student).grid(row=0, column=2, padx=10)
        ttk.Button(btn_frame, text="Refresh Records", command=self.refresh_tree).grid(row=0, column=3, padx=10)

        self.tree = ttk.Treeview(self.root, columns=("ID", "Name", "Age", "Birthday", "Course"), show="headings")
        self.tree.pack(expand=True, fill="both", pady=20)

        for col in self.tree["columns"]:
            self.tree.heading(col, text=col)
            self.tree.column(col, anchor="center")

        # Bigger font for Treeview
        style.configure("Treeview.Heading", font=("Arial", 16, "bold"))
        style.configure("Treeview", font=("Arial", 14), rowheight=30)

        self.tree.bind("<<TreeviewSelect>>", self.on_select)

    def add_student(self):
        name = self.entries[0].get()
        age = self.entries[1].get()
        birthday = self.entries[2].get()
        course = self.entries[3].get()

        if name and age and birthday and course:
            add_student(name, age, birthday, course)
            self.refresh_tree()
            self.clear_entries()
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    def update_student(self):
        if self.selected_id is None:
            messagebox.showinfo("No Selection", "Select a student to update.")
            return

        name = self.entries[0].get()
        age = self.entries[1].get()
        birthday = self.entries[2].get()
        course = self.entries[3].get()

        if name and age and birthday and course:
            update_student(self.selected_id, name, age, birthday, course)
            self.refresh_tree()
            self.clear_entries()
            self.selected_id = None
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    def delete_student(self):
        if self.selected_id is None:
            messagebox.showinfo("No Selection", "Select a student to delete.")
            return
        delete_student(self.selected_id)
        self.refresh_tree()
        self.clear_entries()
        self.selected_id = None

    def refresh_tree(self):
        for row in self.tree.get_children():
            self.tree.delete(row)

        for student in fetch_students():
            self.tree.insert("", "end", values=student)

    def on_select(self, event):
        selected = self.tree.selection()
        if selected:
            values = self.tree.item(selected[0])["values"]
            self.selected_id = values[0]
            for i in range(4):
                self.entries[i].delete(0, tk.END)
                self.entries[i].insert(0, values[i + 1])

    def clear_entries(self):
        for entry in self.entries:
            entry.delete(0, tk.END)

# -------------------- MAIN --------------------
if __name__ == "__main__":
    init_db()
    login_window = tk.Tk()
    login_app = LoginWindow(login_window)
    login_window.mainloop()
